# include <cstdio># include <iostream># include <algorithm>typedef long long LL;const LL INF = 0x7f7f7f7f7f7f;template <class T>inline T Min(const T& a,const T& b){return a > b ? b : a;}inline void Swap(LL& a,LL& b){a^=b^=a^=b;}inline void Swap(int& a,int& b){a^=b^=a^=b;}LL A[3],B[3],C[3],D[3],ans;int Ancestor(LL& a,LL& b,LL& c){	int d1 = b-a,d2 = c-b;	if(d1 == d2) return 0;	if(d1 < d2)	{		int t = d2 / d1;		if(d2 % d1 == 0) --t;		a = a + t * d1;		b = b + t * d1;		return t + Ancestor(a,b,c);	}	else 	{		int t = d1 / d2;		if(d1 % d2 == 0) --t;		b = b - t * d2;		c = c - t * d2;		return t + Ancestor(a,b,c);	}}void Jump(LL& a,LL& b,LL& c,const int Step){	int d1 = b-a,d2 = c-b;	if(d1 > d2)	{		int t = d1 / d2;		if(d1 % d2 == 0) --t;		if(t >= Step)		{			b = b - Step * d2;			c = c - Step * d2;		}		else 		{			b = b - t * d2;			c = c - t * d2;			Jump(a,b,c,Step-t);		}			}	else 	{		int t = d2 / d1;		if(d2 % d1 == 0) --t;		if(t >= Step)		{			a = a + Step * d1;			b = b + Step * d1;		}		else 		{			a = a + t * d1;			b = b + t * d1;			Jump(a,b,c,Step-t);		}	}}inline void Coby(){	C[0] = A[0];C[1] = A[1];C[2] = A[2];	D[0] = B[0];D[1] = B[1];D[2] = B[2];}int main(){	std::ios::sync_with_stdio(false);		std::cin>>A[0]>>A[1]>>A[2];	std::cin>>B[0]>>B[1]>>B[2];		std::sort(A,A+3);	std::sort(B,B+3);		Coby();		int L1 = Ancestor(C[0],C[1],C[2]);	int L2 = Ancestor(D[0],D[1],D[2]);		if(C[0] == D[0] && C[1] == D[1] && C[2] == D[2])	{		if(L1 > L2) Jump(A[0],A[1],A[2],ans = L1-L2);		else if(L2 > L1) Jump(B[0],B[1],B[2],ans = L2-L1);				if(A[0] == B[0] && A[1] == B[1] && A[2] == B[2]) std::cout<<"YES\n"<<ans;		else		{			int l = 1,r = Min(L1,L2),cnt = 0x7f7f7f7f;			while(l <= r)			{				int mid = (l + r) >> 1;				Coby();Jump(D[0],D[1],D[2],mid);Jump(C[0],C[1],C[2],mid);				if(C[0] == D[0] && C[1] == D[1] && C[2] == D[2]) r = mid-1,cnt = Min(cnt,mid);				else l = mid + 1;			}						std::cout<<"YES\n"<<ans + (cnt << 1);		}	}	else  puts("NO");		return 0;}